// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: users_queries.sql

package out

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const allUsers = `-- name: AllUsers :many
SELECT
    id, created_at, updated_at, name, username, password
FROM
    "users"
LIMIT 50
OFFSET (50 * ($1::INTEGER - 1))::INTEGER
`

func (q *Queries) AllUsers(ctx context.Context, dollar_1 int32) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, allUsers, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Username,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createUser = `-- name: CreateUser :one
INSERT INTO
    "users" (created_at, updated_at, name, username, password)
VALUES
    (CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, $1, $2, $3)
RETURNING id, created_at, updated_at, name, username
`

type CreateUserParams struct {
	Name     string `db:"name" json:"name"`
	Username string `db:"username" json:"username"`
	Password string `db:"password" json:"password"`
}

type CreateUserRow struct {
	ID        uuid.UUID `db:"id" json:"id"`
	CreatedAt time.Time `db:"created_at" json:"created_at"`
	UpdatedAt time.Time `db:"updated_at" json:"updated_at"`
	Name      string    `db:"name" json:"name"`
	Username  string    `db:"username" json:"username"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Name, arg.Username, arg.Password)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Username,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM
    "users"
WHERE
    id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const findUserById = `-- name: FindUserById :one
SELECT
    id, created_at, updated_at, name, username, password
FROM
    "users"
WHERE
    id = $1
`

func (q *Queries) FindUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Username,
		&i.Password,
	)
	return i, err
}

const findUserByUsername = `-- name: FindUserByUsername :one
SELECT
    id, created_at, updated_at, name, username, password
FROM
    "users"
WHERE
    "username" = $1
`

func (q *Queries) FindUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Username,
		&i.Password,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE
    "users"
SET
    name = $2,
    username = $3,
    password = $4,
    updated_at = CURRENT_TIMESTAMP
WHERE
    id = $1
RETURNING id, created_at, updated_at, name, username
`

type UpdateUserParams struct {
	ID       uuid.UUID `db:"id" json:"id"`
	Name     string    `db:"name" json:"name"`
	Username string    `db:"username" json:"username"`
	Password string    `db:"password" json:"password"`
}

type UpdateUserRow struct {
	ID        uuid.UUID `db:"id" json:"id"`
	CreatedAt time.Time `db:"created_at" json:"created_at"`
	UpdatedAt time.Time `db:"updated_at" json:"updated_at"`
	Name      string    `db:"name" json:"name"`
	Username  string    `db:"username" json:"username"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Username,
		arg.Password,
	)
	var i UpdateUserRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Username,
	)
	return i, err
}

const usersCount = `-- name: UsersCount :one
SELECT
    COUNT(*) AS total_count,
    (COUNT(*) / 50)::INTEGER AS total_pages
FROM
    "users"
`

type UsersCountRow struct {
	TotalCount int64 `db:"total_count" json:"total_count"`
	TotalPages int32 `db:"total_pages" json:"total_pages"`
}

func (q *Queries) UsersCount(ctx context.Context) (UsersCountRow, error) {
	row := q.db.QueryRowContext(ctx, usersCount)
	var i UsersCountRow
	err := row.Scan(&i.TotalCount, &i.TotalPages)
	return i, err
}
