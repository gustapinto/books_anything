// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: authors_queries.sql

package out

import (
	"context"

	"github.com/google/uuid"
)

const allAuthorsFromUser = `-- name: AllAuthorsFromUser :many
SELECT
   id, created_at, updated_at, name, user_id
FROM
    "authors"
WHERE
    user_id = $1
LIMIT 50
OFFSET (50 * ($2::INTEGER - 1))::INTEGER
`

type AllAuthorsFromUserParams struct {
	UserID uuid.UUID `db:"user_id" json:"user_id"`
	Page   int32     `db:"page" json:"page"`
}

func (q *Queries) AllAuthorsFromUser(ctx context.Context, arg AllAuthorsFromUserParams) ([]Author, error) {
	rows, err := q.db.QueryContext(ctx, allAuthorsFromUser, arg.UserID, arg.Page)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createAuthor = `-- name: CreateAuthor :one
INSERT INTO
    "authors" (created_at, updated_at, name, user_id)
VALUES
    (CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, $1, $2)
RETURNING id, created_at, updated_at, name, user_id
`

type CreateAuthorParams struct {
	Name   string    `db:"name" json:"name"`
	UserID uuid.UUID `db:"user_id" json:"user_id"`
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (Author, error) {
	row := q.db.QueryRowContext(ctx, createAuthor, arg.Name, arg.UserID)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.UserID,
	)
	return i, err
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM
    "authors"
WHERE
    id = $1
    AND user_id = $2
`

type DeleteAuthorParams struct {
	ID     uuid.UUID `db:"id" json:"id"`
	UserID uuid.UUID `db:"user_id" json:"user_id"`
}

func (q *Queries) DeleteAuthor(ctx context.Context, arg DeleteAuthorParams) error {
	_, err := q.db.ExecContext(ctx, deleteAuthor, arg.ID, arg.UserID)
	return err
}

const findAuthorByIdAndUser = `-- name: FindAuthorByIdAndUser :one
SELECT
    id, created_at, updated_at, name, user_id
FROM
    "authors"
WHERE
    id = $1
    AND user_id = $2
`

type FindAuthorByIdAndUserParams struct {
	ID     uuid.UUID `db:"id" json:"id"`
	UserID uuid.UUID `db:"user_id" json:"user_id"`
}

func (q *Queries) FindAuthorByIdAndUser(ctx context.Context, arg FindAuthorByIdAndUserParams) (Author, error) {
	row := q.db.QueryRowContext(ctx, findAuthorByIdAndUser, arg.ID, arg.UserID)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.UserID,
	)
	return i, err
}

const updateAuthor = `-- name: UpdateAuthor :one
UPDATE
    "authors"
SET
    name = $3,
    updated_at = CURRENT_TIMESTAMP
WHERE
    id = $1
    AND user_id = $2
RETURNING id, created_at, updated_at, name, user_id
`

type UpdateAuthorParams struct {
	ID     uuid.UUID `db:"id" json:"id"`
	UserID uuid.UUID `db:"user_id" json:"user_id"`
	Name   string    `db:"name" json:"name"`
}

func (q *Queries) UpdateAuthor(ctx context.Context, arg UpdateAuthorParams) (Author, error) {
	row := q.db.QueryRowContext(ctx, updateAuthor, arg.ID, arg.UserID, arg.Name)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.UserID,
	)
	return i, err
}
